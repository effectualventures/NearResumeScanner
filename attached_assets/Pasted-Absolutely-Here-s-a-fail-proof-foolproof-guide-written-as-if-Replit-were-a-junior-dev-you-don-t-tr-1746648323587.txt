Absolutely. Here’s a fail-proof, foolproof guide written as if Replit were a junior dev you don’t trust yet—with every step, checkpoint, fallback, and sanity check built in. If Replit follows this exactly, it will render the NEAR logo in the PDF footer without garbled text.

⸻

🛠️ Near Logo Rendering: Replit-Proof Implementation Guide

🎯 Success Criteria (Print these out and put them on your desk)

✅ The NEAR logo appears clearly in the PDF footer, in color, not as text
✅ The PDF is generated successfully without Puppeteer errors
✅ No “POP S·H” or captcha-looking garbage
✅ Works even after refresh or rebuild
✅ The logo is positioned bottom-right, at consistent size and spacing
✅ No missing files, undefined variables, or broken paths

⸻

📂 STEP 1: Organize the File Correctly

Ask yourself: “If I restarted the app, would this image still be in the same place?”

	1.	In your Replit project, create this exact folder path:

/public/images/

	2.	Move your logo file into that folder and rename it exactly:

near_logo.png

	3.	Final file path should be:

/public/images/near_logo.png

✅ Check: Is the image file visible in the Replit sidebar under /public/images/near_logo.png?
✅ Check: Is it a PNG, not a .jpeg or .webp?

⸻

🧠 STEP 2: Modify the HTML Template (Handlebars)

Ask yourself: “Is this image loaded using a file:// URL, not base64?”

In pdf-generator.ts, locate your Handlebars template (where HTML is generated). Replace any base64 or broken logo code with:

<div id="footer-logo">
  <img src="file://{{logoPath}}" width="100" alt="Near Logo" />
</div>

✅ Check: Does the image src use file://{{logoPath}}?
✅ Check: Is this block inside the main template used in Puppeteer rendering?

⸻

🧾 STEP 3: Set the Absolute Logo Path in Node

Ask yourself: “Is this a real file path on disk—not a URL?”

In pdf-generator.ts, before rendering HTML, add:

import path from 'path';

const logoPath = path.resolve(__dirname, '../public/images/near_logo.png');

const html = template({
  ...resumeData,
  logoPath
});

✅ Check: Is logoPath passed into the template context?
✅ Check: Did you use path.resolve, not a relative path like ../../?

⸻

🎛️ STEP 4: Configure Puppeteer to Allow Local Files

Ask yourself: “Is Puppeteer allowed to load local file:// resources?”

When launching Puppeteer, make sure the following args are used:

const browser = await puppeteer.launch({
  headless: 'new',
  args: ['--allow-file-access-from-files']
});

✅ Check: Is this code actually running (not commented out or inside an unused function)?
✅ Check: Is Puppeteer using headless: 'new' (important for Chromium behavior)?

⸻

🎨 STEP 5: Style the Footer Logo

Ask yourself: “Does the logo appear where it should?”

Add this to your HTML template’s <style> block:

<style>
  #footer-logo {
    position: fixed;
    bottom: 20px;
    right: 30px;
    width: 100px;
  }
</style>

✅ Check: Is this CSS included in the same HTML file that Puppeteer renders?
✅ Check: Does the div with #footer-logo show up when you view the HTML directly?

⸻

🧪 STEP 6: Debug with HTML First

Ask yourself: “Is the problem in the HTML or Puppeteer?”

	1.	Before generating the PDF, write the raw HTML to disk:

import fs from 'fs';
fs.writeFileSync('test_resume_preview.html', html);

	2.	Open that file in your browser (outside Puppeteer)

✅ Check: Does the logo appear in the HTML?
→ If yes, your HTML is good. If not, the bug is in template or logo path.

✅ Check: If Puppeteer fails but HTML works, the issue is Puppeteer config.

⸻

🧰 STEP 7: Add a Fallback in Case Logo Is Missing

Just to be safe, in your template, add fallback text:

{{#if logoPath}}
  <img src="file://{{logoPath}}" width="100" alt="Near Logo" />
{{else}}
  <span style="color: blue; font-weight: bold;">NEAR</span>
{{/if}}

✅ Check: Does the PDF still look acceptable even if the image fails?

⸻

🔁 Sanity Checklist (Final Questions)
	•	Did I use file:// and not base64?
	•	Did I give Puppeteer access with --allow-file-access-from-files?
	•	Is the PNG named near_logo.png and in /public/images/?
	•	Is the full image path created with path.resolve?
	•	Did I actually pass logoPath into the template context?
	•	Did I test the raw HTML in Chrome to confirm it works before generating PDF?

⸻

📎 Summary

If the PDF still doesn’t show the logo after doing all this exactly, then either:
	•	Puppeteer isn’t loading the HTML you’re debugging
	•	The path you’re giving it is still relative
	•	Replit’s file system has permissions or path weirdness (possible in some containers)

Let me know if you’d like me to send you an updated version of your pdf-generator.ts file with all this baked in.