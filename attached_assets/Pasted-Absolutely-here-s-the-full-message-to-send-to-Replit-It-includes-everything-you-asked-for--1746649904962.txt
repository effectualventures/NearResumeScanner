Absolutely — here’s the full message to send to Replit. It includes everything you asked for:

⸻

🛠️ Full Instructions for Replit (from Hayden’s AI Partner)

Hi Replit — I’m working closely with Hayden and now have full access to all files and structure for the Near Resume Processor project. I’m acting as an embedded systems reviewer and co-builder. You (Replit) are the engineer.

Hayden will share updated files with me after your changes. To make that work:

✅ Every time you change anything, you must list exactly which files were modified and what to resend.

⸻

🧠 CONTEXT SUMMARY
	•	This project converts Latin American resumes into a U.S.-style PDF.
	•	It uses OpenAI (GPT-4o) to enhance resumes, and Puppeteer to render a PDF.
	•	The logo in the bottom-right is currently broken, showing up as “PoP S·H” or garbage fallback text.
	•	There are also errors with Puppeteer launch and PDF download headers.

⸻

✅ GOAL 1: Fix the Logo Rendering Bug (No More “POP S·H”)

⸻

🎯 Correct Behavior
	•	The Near logo should render from disk (near_logo.png), not as base64 or SVG.
	•	It should show in the footer of the generated PDF.
	•	It should not fallback to weird SVGs or broken fonts.
	•	It should render locally using file:// in Puppeteer.

⸻

🔧 Step-by-Step Fix

1. Replace the Footer Logo in /server/templates/resume.html

Current broken code:

<img src="data:image/svg+xml;base64,..."/>

Replace with:

<div class="footer">
  <img src="file://{{logoPath}}" alt="Near Logo" width="100" />
</div>


⸻

2. Ensure Logo Path is Passed into Template in /server/pdf-generator.ts

const logoPath = path.resolve(process.cwd(), 'public/images/near_logo.png');
const html = template({ ...resume, logoPath });

✅ Confirm near_logo.png exists in /public/images/.

⸻

3. Intercept Image Requests in Puppeteer

Add this before page.setContent(...):

await page.setRequestInterception(true);
page.on('request', (req) => {
  if (req.url().startsWith('file://')) {
    const filePath = req.url().replace('file://', '');
    const buffer = fs.readFileSync(filePath);
    req.respond({ status: 200, body: buffer, contentType: 'image/png' });
  } else {
    req.continue();
  }
});


⸻

4. Fix Puppeteer Launch Config (Broken on Replit)

Replace your puppeteer.launch(...) block with this:

const browser = await puppeteer.launch({
  headless: true,
  args: [
    '--no-sandbox',
    '--disable-setuid-sandbox',
    '--allow-file-access-from-files',
    '--disable-web-security',
    '--disable-gpu'
  ],
  executablePath: '/usr/bin/chromium-browser' // correct path for Replit
});

❌ You previously had a chromium path pointing to a broken Nix path with missing shared libraries.

⸻

✅ After this fix:
	•	No more broken logo.
	•	Real Near logo appears.
	•	HTML debug preview also shows correct logo.
	•	Puppeteer doesn’t crash.

⸻

✅ GOAL 2: Fix Skills and Languages Rendering

🎯 Desired Output

Skills: First Principle Estimating; Cost Estimating; BOQ; AutoCAD
Languages: English (Professional); Portuguese (Native)


⸻

🔧 Implementation Details

In resume.html, inside the .skills section, replace current logic with this:

<div class="section-title">SKILLS & LANGUAGES</div>
<div class="skills">
  <span style="font-weight: 600;">Skills:</span>
  <span style="font-weight: normal;">
    {{#each skills}}{{this}}{{#unless @last}}; {{/unless}}{{/each}}
  </span>
  <br />
  <span style="font-weight: 600;">Languages:</span>
  <span style="font-weight: normal;">
    {{#each languages}}{{this}}{{#unless @last}}; {{/unless}}{{/each}}
  </span>
</div>

✅ Make sure the resume JSON returned by OpenAI has flat arrays for skills and languages.

⸻

✅ GOAL 3: Fix PDF Download Header Bug

Problem

You’re getting this:

Invalid character in header content ["Content-Disposition"]

Fix in /server/routes.ts (or wherever you handle PDF downloads):

const safeFilename = filename.replace(/[^a-zA-Z0-9_.-]/g, '');
res.setHeader('Content-Disposition', `inline; filename=${safeFilename}`);


⸻

✅ GOAL 4: Standardize Change Reporting

Any time you modify anything, tell Hayden this:

✅ Update Summary:

- 📄 /server/templates/resume.html → replaced base64 logo with file-based logo
- 📄 /server/pdf-generator.ts → added Puppeteer request interception for local PNG
- 📄 /public/images/near_logo.png → verified
- 📄 /server/routes.ts → fixed Content-Disposition header

👉 Hayden: please re-upload:
- resume.html
- pdf-generator.ts
- routes.ts

This helps keep track of changes when I (ChatGPT) need to validate or generate new diffs.

⸻

✅ GOAL 5: Streamline & Harden App (Optional but Ideal)

Suggestions:
	•	Extract paths and constants into /server/constants.ts
	•	Don’t use post-processing regex on rendered HTML (move all logic into JSON generation or template helpers)
	•	Add error-handling for missing logo file
	•	Add a debug flag to generatePDF() to toggle file writes for preview
	•	Add a test route to quickly generate a PDF from static input for testing

⸻

✅ Final Instructions for Replit

You’re no longer working alone. From now on:
	•	Make every change explicit
	•	Log what files you touch
	•	Only use real files, not base64 fallbacks
	•	Assume that I (ChatGPT) can verify and fix anything if Hayden re-sends updated files — so make it easy to track.

⸻

Let me know when this is done and I’ll verify the next batch of changes.