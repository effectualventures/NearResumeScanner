Thanks for the detailed breakdown—you’re already debugging like a pro. Here’s a targeted analysis and specific fix suggestions for each of the three issues, starting with the critical logo rendering bug in pdf-generator.ts.

⸻

🛠️ Issue 1: NEAR Logo Rendering Problem (“POP S·H” Garbled Text)

✅ Root Cause

The string "POP S·H" typically appears when binary image data (like base64) is not properly interpreted in a headless Chromium rendering context—usually because:
	•	The base64 string is malformed or truncated
	•	It’s being injected incorrectly into the Handlebars HTML template
	•	Puppeteer fails to resolve embedded resources with data:image/...;base64, URLs if used inside position: fixed blocks or due to font fallback/rendering quirks

⸻

✅ Recommended Fix: Use a Local Static File Instead of Base64

✅ Step-by-Step Fix:

🔹 1. Place logo in public/ or static/ folder

Create a public/images/near-logo.png folder in your backend project root.

🔹 2. Modify your Handlebars template HTML (in pdf-generator.ts)

Instead of embedding base64 directly, use a file path, and let Puppeteer fetch it as a local resource:

<div id="footer-logo">
  <img src="file://{{logoPath}}" width="80" alt="NEAR Logo" />
</div>

Or, inject it dynamically via Node path:

const html = template({
  ...data,
  logoPath: path.resolve(__dirname, './public/images/near-logo.png')
});

Ensure file:// scheme is used, and absolute path is passed.

🔹 3. Ensure Puppeteer allows file loading

When launching Puppeteer, add:

const browser = await puppeteer.launch({
  headless: 'new',
  args: ['--allow-file-access-from-files']
});

This allows file:// URLs to be resolved inside Chromium.

🔹 4. Add basic styling fallback

Style the image container with explicit positioning:

#footer-logo {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 80px;
}

Put this inline or in a <style> block in the template string to ensure PDF styling works.

⸻

🔄 Alternative Fix (If Puppeteer still fails on file://)

Use page.setRequestInterception(true) and inject the image as a binary resource during PDF render. Let me know if you want that more complex approach.

⸻

🧾 Issue 2: Resume Quality Inconsistency

✅ Root Causes:
	•	GPT output variability: OpenAI isn’t guaranteed to format consistently
	•	Handlebars template lacks conditionals and defaults
	•	One-page PDF constraint trims content silently

⸻

✅ Fixes:

🛠 1. Post-process the resume JSON before template injection

Normalize structure in code:

resume.skills = resume.skills?.map(s => ({
  ...s,
  emphasis: true // enforce bold or structured display
}));

Add defaults:

resume.summary = resume.summary || "Professional Summary Unavailable";

🛠 2. Improve your Handlebars template conditionals

Use fallback rendering like:

{{#if skills.length}}
  <ul>
    {{#each skills}}
      <li><strong>{{name}}</strong></li>
    {{/each}}
  </ul>
{{else}}
  <p>No skills provided</p>
{{/if}}

🛠 3. Use a CSS utility class for formatting consistency

li {
  margin-bottom: 4px;
  font-size: 12px;
}

🛠 4. Avoid silent cutoffs

Run a height/word count check pre-render:

if (resume.experience.length > 6) {
  resume.experience = resume.experience.slice(0, 6);
}


⸻

🐢 Issue 3: Performance Challenges (15s+ & Timeouts)

✅ Solutions:

🛠 1. Parallelize OpenAI + File Handling

Right now, steps may be sequential:
	•	extract → send to GPT → process → render

Use Promise.all() to:
	•	Start GPT request + Parse file + Pre-render template concurrently

🛠 2. Add streaming / progressive UI

Update the frontend to reflect distinct phases:
	•	⏳ Uploading
	•	✨ Enhancing (AI)
	•	🧾 Generating PDF
Even if time remains the same, perceived latency drops.

🛠 3. Add retry with exponential backoff

For OpenAI failures:

async function withRetry(fn, retries = 3) {
  try {
    return await fn();
  } catch (e) {
    if (retries <= 0) throw e;
    await new Promise(res => setTimeout(res, 1000 * (4 - retries)));
    return withRetry(fn, retries - 1);
  }
}


⸻

✅ Final Thoughts

You’re really close—most of these issues are well-diagnosed. The critical fix is the logo, and moving to file:// rendering via Puppeteer is your best bet. After that, consistency and perf will follow with better template control and async optimization.

Would you like help rewriting the full pdf-generator.ts logic with the logo fix implemented?