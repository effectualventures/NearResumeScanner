Here is a zero-room-for-error, full-system diagnosis and fix guide for Replit to fix the broken NEAR logo in the PDF generated by Puppeteer.

This guide assumes the Replit app uses Node.js + Express + Puppeteer + Handlebars and the goal is to render a visible NEAR logo in the bottom-right of the PDF footer, not broken text like “POP S·H”.

⸻

🛠️ REPLIT FIX THIS NOW — DETAILED IMPLEMENTATION PLAN

⸻

🎯 OBJECTIVE

Get the NEAR logo to render in the footer of the generated PDF, with perfect consistency.

Success Criteria:
	•	NEAR logo appears in the bottom right of the PDF (not broken characters)
	•	PDF builds successfully with no errors
	•	HTML preview in Replit shows the logo
	•	Works reliably on rebuilds and reloads

⸻

✅ SECTION 1: PROJECT FILE STRUCTURE

🔧 1. Create a public folder and place the logo properly

📁 Correct structure:

/public/images/near_logo.png

❌ Do NOT:
	•	Use .jpeg, .jpg, or .webp
	•	Store it in /assets, /server, or embed as base64 in the HTML
	•	Rely on dynamic links or imports — Puppeteer needs a full disk path

🔍 Questions Replit must ask:
	•	“Can I see near_logo.png in the file tree?”
	•	“Is this an actual image file, not a text placeholder?”
	•	“Is this path static and consistent across builds?”

⸻

✅ SECTION 2: HANDLEBARS HTML TEMPLATE FIX

🔧 2. Inject the logo in the footer section of the HTML

✅ Correct Handlebars code:

<div id="footer-logo">
  <img src="file://{{logoPath}}" width="100" alt="NEAR Logo" />
</div>

🔍 Questions Replit must ask:
	•	“Am I using file:// with logoPath instead of base64?”
	•	“Is the image tag inside the HTML string passed to Puppeteer?”

⸻

✅ SECTION 3: SERVER-SIDE CODE FIX (pdf-generator.ts)

🔧 3. Inject logoPath into the Handlebars context using an absolute path

import path from 'path';

const logoPath = path.resolve(__dirname, '../public/images/near_logo.png');

const html = template({
  ...resumeData,
  logoPath
});

🔍 Questions Replit must ask:
	•	“Is logoPath injected into the context object used by Handlebars?”
	•	“Did I use path.resolve to ensure it’s absolute?”
	•	“Am I resolving relative to __dirname (not assuming CWD)?”

⸻

✅ SECTION 4: CONFIGURE PUPPETEER CORRECTLY

🔧 4. Modify Puppeteer launch options to allow file:// access

const browser = await puppeteer.launch({
  headless: 'new',
  args: ['--allow-file-access-from-files']
});

🔍 Questions Replit must ask:
	•	“Did I include the correct Chromium flag?”
	•	“Is launch() being called with these exact args?”
	•	“Am I using headless: 'new' (recommended for Chrome 2023+)?”

⸻

✅ SECTION 5: LOGO POSITIONING IN THE PDF

🔧 5. Add inline styles to fix position and dimensions

In the same HTML string passed to Puppeteer, add:

<style>
  #footer-logo {
    position: fixed;
    bottom: 20px;
    right: 30px;
    width: 100px;
    z-index: 1000;
  }
</style>

This ensures logo is always visible, consistent, and does not overlap text.

🔍 Questions Replit must ask:
	•	“Am I styling the logo div directly in the HTML template?”
	•	“Is this <style> block included in the compiled HTML?”

⸻

✅ SECTION 6: DEBUGGING TOOL

🔧 6. Write raw HTML to disk before PDF generation

Insert this in pdf-generator.ts for debugging:

import fs from 'fs';
fs.writeFileSync('debug-preview.html', html);

Then open this file inside Replit to confirm the logo renders.

🔍 Questions Replit must ask:
	•	“Does the logo appear in the raw HTML preview?”
	•	“If it works in HTML but not PDF, is Puppeteer config wrong?”

⸻

✅ SECTION 7: FAILSAFE FALLBACK

🔧 7. Add a fallback in the HTML template if image fails

{{#if logoPath}}
  <img src="file://{{logoPath}}" width="100" alt="NEAR Logo" />
{{else}}
  <span style="font-weight: bold; color: blue;">NEAR</span>
{{/if}}

🔍 Questions Replit must ask:
	•	“If the image doesn’t load, do I at least show text fallback?”

⸻

🧪 FINAL SELF-CHECKLIST FOR REPLIT

Replit must verify YES to all of the following:
	•	Is the image file located at public/images/near_logo.png?
	•	Is the template using file://{{logoPath}} not base64?
	•	Is logoPath created with path.resolve(__dirname, ...)?
	•	Is Puppeteer launched with --allow-file-access-from-files?
	•	Is the logo styled with a fixed position and visible in HTML preview?
	•	Is HTML preview tested before PDF creation?
	•	Did we remove old attempts like base64, text-logo, or captcha-style text?

⸻

✅ IF STILL BROKEN…

If the PDF still shows “POP S·H”:
	•	❌ You’re probably embedding base64 data that’s invalid
	•	❌ Or Puppeteer is blocking access due to missing flag
	•	❌ Or the logo path is relative or incorrect

🛠 Ask me to regenerate your entire pdf-generator.ts file from scratch with all of this baked in.

Want me to do that now?